#!/bin/bash
version="0.4.2"

env_path=$HOME/spokit/env
node_path=$(which cardano-node)
cli_path=$(which cardano-cli)

node_version=$(cardano-node version | head -1 | cut -d' ' -f2)
cli_version=$(cardano-cli version | head -1 | cut -d' ' -f2)


# フォアグラウンドカラー
BLACK='\033[0;30m'
RED='\e[31m'
GREEN='\e[32m'
YELLOW='\e[33m'
BLUE='\e[34m'
PURPLE='\e[35m'
CYAN='\e[36m'
WHITE='\e[37m'
GRAY='\033[1;30m'

# 太字のフォアグラウンドカラー
B_BLACK='\e[30;1m'
B_RED='\e[31;1m'
B_GREEN='\e[32;1m'
B_YELLOW='\e[33;1m'
B_BLUE='\e[34;1m'
B_PURPLE='\e[35;1m'
B_CYAN='\e[36;1m'
B_WHITE='\e[37;1m'

# 下線
U_BLACK='\e[30;4m'
U_RED='\e[31;4m'
U_GREEN='\e[32;4m'
U_YELLOW='\e[33;4m'
U_BLUE='\e[34;4m'
U_PURPLE='\e[35;4m'
U_CYAN='\e[36;4m'
U_WHITE='\e[37;4m'

# 点滅
F_BLACK='\e[30;5m'
F_RED='\e[31;5m'
F_GREEN='\e[32;5m'
F_YELLOW='\e[33;5m'
F_BLUE='\e[34;5m'
F_PURPLE='\e[35;5m'
F_CYAN='\e[36;5m'
F_WHITE='\e[37;5m'

# 色リセット
NC='\033[0m' # No Color

#--------------------
##ユーザー関数
#--------------------

#変数チェック
VariableEnabledCheck(){
  if [ -n "${1}" ]; then
    echo "${2}"
  else
    echo "${3}"
  fi
}

#パスチェック
PathEnabledCheck(){
  if [ -f "${1}" ]; then
    echo -e "${2}"
  else
    echo -e "${3}"
  fi
}

InputSudoPass(){
  if sudo -n true 2>/dev/null; then
    echo ""
  else
    gum input --password --no-show-help --placeholder="sudoパスワードを入力してください"
  fi
}

UfwCheck(){
  sudopass=$(InputSudoPass)
  echo "$sudopass" | sudo -S ufw status | awk '/Status/ {print $2}'
}


#--------------------
#ファイル生成関数
#--------------------
CreatePoolMetaJson(){
cat <<-EOF > ${NODE_HOME}/${5}
{
  "name": "$1",
  "description": "$2",
  "ticker": "$3",
  "homepage": "$4"
}
EOF
}


Header(){
  echo -e "${CYAN}"
  color_text="${YELLOW}${1}${NC}"
  plain_text="${1}"

  width=20
  pad=$((width - ${#plain_text}))
  cat << "EOF"
  ███████╗██████╗  ██████╗ ██╗  ██╗██╗████████╗
  ██╔════╝██╔══██╗██╔═══██╗██║ ██╔╝██║╚══██╔══╝
  ███████╗██████╔╝██║   ██║█████╔╝ ██║   ██║   
  ╚════██║██╔═══╝ ██║   ██║██╔═██╗ ██║   ██║   
  ███████║██║     ╚██████╔╝██║  ██╗██║   ██║   
  ╚══════╝╚═╝      ╚═════╝ ╚═╝  ╚═╝╚═╝   ╚═╝ 
EOF
  echo -e "${NC}"
  echo -e "           ${CYAN}Cardano SPO Tool Kit${NC} ${GREEN}v${version}${NC}         "
  echo
  echo -e "${YELLOW}ネットワーク:${NC} ${NODE_CONFIG}"
  echo -e "${YELLOW}ノードタイプ:${NC} ${NODE_TYPE}"
  echo
  echo -e "${WHITE}----------------------------------------------------${NC}"
  printf "%*s%b\n" "$pad" "" "$color_text"
  echo -e "${WHITE}----------------------------------------------------${NC}"
  #gum style --align center --width 60 --margin "0 2 1 2" --padding "0 0" "ネットワーク:$(gum style --foreground 011 ${NODE_CONFIG}) | ノードタイプ:$(gum style --foreground 011 ${NODE_TYPE})"
}

SystemUpdate(){
  LglayStyle "Ubuntuパッケージアップデート開始..."
  sudopass=$(InputSudoPass)
  echo "$sudopass" | sudo -S apt update -y && sudo apt upgrade -y
  echo
  DglayStyle "Ubuntuパッケージデート完了"
  sleep 3
}

#依存関係インストール
Installdependencies(){
  sudo apt install git jq bc automake tmux rsync htop curl build-essential pkg-config libffi-dev libgmp-dev libssl-dev libtinfo-dev libsystemd-dev zlib1g-dev make g++ wget libncursesw5 libtool autoconf liblmdb-dev -y > /dev/null 2>&1
}

#--------------------
#支払い系関数
#--------------------

#loverace変換
scale1(){
  #r_amount=`echo "scale=1; $1 / 1000000" | bc`
  echo "scale=6; $1 / 1000000" | bc
}

scale3(){
  #r_amount=`echo "scale=3; $1 / 1000000" | bc | awk '{echo "%.5f\n", $0}'`
  echo "scale=6; $1 / 1000000" | bc | awk '{printf "%.5f\n", $0}'
}

WalletBalance(){
  tx_in=""
  total_balance=0
  while read -r utxo; do
      in_addr=$(awk '{ print $1 }' <<< "${utxo}")
      idx=$(awk '{ print $2 }' <<< "${utxo}")
      utxo_balance=$(awk '{ print $3 }' <<< "${utxo}")
      total_balance=$((${total_balance}+${utxo_balance}))
      tx_in="${tx_in} --tx-in ${in_addr}#${idx}"
  done < ${NODE_HOME}/balance.out
  txcnt=$(cat ${NODE_HOME}/balance.out | wc -l)
  style "ADA残高:" "$(scale1 ${total_balance})"
}

Cli_FeeCal(){
  fee=$(cardano-cli conway transaction calculate-min-fee \
    --tx-body-file ${NODE_HOME}/tx.tmp \
    --tx-in-count ${txcnt} \
    --tx-out-count 1 \
    $NODE_NETWORK \
    --witness-count 2 \
    --byron-witness-count 0 \
    --output-text \
    --protocol-params-file ${NODE_HOME}/params.json | awk '{ print $1 }')
echo fee: $fee
echo
}

#ウォレットUtxO確認
CheckWallet(){ 
  echo "アドレス:" 
  YellowStyle "$(cat ${NODE_HOME}/${PAYMENT_ADDR_FILENAME})"
  gum spin --spinner dot --show-output --title "ウォレット残高を確認しています" -- cardano-cli conway query utxo --address $(cat ${NODE_HOME}/${PAYMENT_ADDR_FILENAME}) $NODE_NETWORK --output-text --out-file ${NODE_HOME}/fullUtxo.out
  #echo $0 >> fullUtxo.out
  tail -n +3 ${NODE_HOME}/fullUtxo.out | sort -k3 -nr > ${NODE_HOME}/balance.out
  echo
  WalletBalance
  echo
  echo "UTXO一覧"
  LglayStyle "$(cat ${NODE_HOME}/balance.out)"
}

reward_Balance(){
  if [[ -e "${NODE_HOME}/${STAKE_ADDR_FILENAME}" ]]; then
    echo "■stakeアドレス"
    printf "${YELLOW}$(cat ${NODE_HOME}/$STAKE_ADDR_FILENAME)${NC}\n\n"
    pool_reward=$(cardano-cli conway query stake-address-info --address "$(cat "${NODE_HOME}/${STAKE_ADDR_FILENAME}")" $NODE_NETWORK | jq .[].rewardAccountBalance)
    #pool_reward=$(cat $PARENT/stake_json.txt | grep rewardAccountBalance | awk '{ print $2 }')
    if [[ -n ${pool_reward} ]]; then
      pool_reward_Amount=$(scale1 ${pool_reward})
      printf "報酬額:%s%s%s ADA (%s Lovelace)\n" "${GREEN}" "${pool_reward_Amount}" "${NC}" "${pool_reward}"
      Gum_OneSelect "戻る"
    else
      echo "報酬はまだ発生していません"
      Gum_OneSelect "戻る"
    fi
  else
    echo "${STAKE_ADDR_FILENAME}ファイルが見つかりません"
    echo
    echo "${NODE_HOME}に${STAKE_ADDR_FILENAME}をコピーするか"
    echo "envファイルのSTAKE_ADDR_FILENAME変数の指定値をご確認ください"
    echo
    Gum_OneSelect "戻る"
  fi
}

#出金前チェック
tx_Check(){
  printf "%-8s : ${YELLOW}%-15s${NC}\n" "送金先" "$1"
  printf "%-8s : ${GREEN}%-15s${NC}\n" "送金額" "$(scale1 $2) ADA"
  printf "%-8s : ${GREEN}%-15s${NC}\n" "手数料" "$(scale3 $3) ADA"
  printf "%-8s : ${GREEN}%-15s${NC}\n" "残高額" "$(scale1 $4) ADA"

}

#トランザクション送信
Cli_TxSubmit(){
  while :
  do
    Gum_OneSelect "1～3が完了したらEnterを押して下さい"
    echo
    if [ -f ${NODE_HOME}/tx.signed ]; then
      FilePathAndHash ${NODE_HOME}/tx.signed
      echo "上記のハッシュ値とエアギャップに表示されてるハッシュ値と照合してください"
      echo
      Gum_Confirm_YesNo "ハッシュ値は一致していますか？" "Yes" "No"
      if [[ ${iniSettings} == "Yes" ]]; then
        break 1
      else
        echo "tx.signedを再度エアギャップからコピーしてください"
        Gum_OneSelect "コピーしたらEnterを押して下さい"
        echo
      fi
    else
      echo "tx.signedが見つかりません。正しいディレクトリにコピーしてください"
      echo
      Gum_OneSelect "コピーしたらEnterを押して下さい"
    fi
  done

  echo

  Gum_Confirm_YesNo "トランザクションを送信しますか？" "Yes" "再度トランザクション作成から実施してください"
  if [[ ${iniSettings} == "Yes" ]]; then
    local tx_result=$(cardano-cli conway transaction submit --tx-file ${NODE_HOME}/tx.signed $NODE_NETWORK)
    echo
    echo '----------------------------------------'
    echo 'Tx送信結果'
    echo '----------------------------------------'
    if [[ -n $tx_result ]]; then
      if dpkg --compare-versions "$node_version" ge "10.2.1"; then
        tx_id=$(echo $tx_result | jq .txhash | sed 's/"//g')
      else
        tx_id=$(cardano-cli conway transaction txid --tx-body-file ${NODE_HOME}/tx.raw)
        echo $tx_result
      fi
      echo 'TxID:' $tx_id
      echo
      echo 'トランザクションURL'
      if [ ${NODE_CONFIG} == 'mainnet' ]; then
        echo "https://cardanoscan.io/transaction/${tx_id}"
      elif [ ${NODE_CONFIG} == 'preprod' ]; then
        echo "https://preprod.cardanoscan.io/transaction/${tx_id}"
      elif [ ${NODE_CONFIG} == 'preview' ]; then
        echo "https://preview.cardanoscan.io/transaction/${tx_id}"
      else
        echo "TxID:${tx_id}"
      fi
      printf "\n${GREEN}Tx送信に成功しました${NC}\n"
      echo
      #トランザクション確認
      printf "\n${YELLOW}Tx承認を確認しています。このまましばらくお待ち下さい...${NC}\n\n"
      while :
        do
        koios_tx_status=$(curl -s -X POST "$KOIOS_API/tx_status" -H "Accept: application/json" -H "content-type: application/json" -d "{\"_tx_hashes\":[\"${tx_id}\"]}" | jq -r '.[].num_confirmations')
        if [[ ${koios_tx_status} != "null" ]] && [ ${koios_tx_status} -gt 1 ]; then
          printf "確認済みブロック:$koios_tx_status ${GREEN}Txが承認されました${NC}\n\n"
          sleep 3s
          break
        else
          sleep 10s
        fi
      done
      echo
      Gum_OneSelect "戻る"
    else
      echo ${txResult}
      echo
      printf "${RED}Tx送信に失敗しました${NC}\n"
      Gum_OneSelect "戻る"
    fi
  else 
    echo
    echo "送信をキャンセルしました"
    echo
    Gum_OneSelect "戻る"
    echo
  fi
}



#--------------------
#モジュール関数
#--------------------

FilePathAndHash(){
  echo -e "${1} >> ${YELLOW}$(sha256sum ${1} | awk '{ print $1 }')${NC}"
}

#adahandleConvert
adahandleConvert(){
  adahandlePolicyID="f0ff48bbb7bbe9d59a40f1ce90e9e9d0ff5002ec48f232b49ca0fb9a"
  assetNameHex=$(echo -n "${1}" | xxd -b -ps -c 80 | tr -d '\n')
  if [[ $NODE_CONFIG != "mainnet" ]]; then
    assetNameHex="000de140${assetNameHex}"
  fi
  curl -s -X GET "$KOIOS_API/asset_addresses?_asset_policy=${adahandlePolicyID}&_asset_name=${assetNameHex}" -H "Accept: application/json" | jq -r '.[].payment_address'
}

message_file_transfer(){
  echo
  echo "【エアギャップへファイル転送】"
  echo
  echo -e "${YELLOW}1. BPの ${1} をエアギャップのcnodeディレクトリにコピーしてください${NC}"
  echo '----------------------------------------'
  echo -e ">> [BP] ⇒ ${GREEN}${1}${NC}  ⇒ [エアギャップ]"
  echo '----------------------------------------'
  echo
  echo -e "${YELLOW}2. エアギャップ作業${NC}"
  echo '----------------------------------------'
  echo -e "エアギャップで「${GREEN}$2${NC}」コマンドを実行し以下のハッシュ値と一致するか確認してください"
  FilePathAndHash "${NODE_HOME}/${1}"
  echo '----------------------------------------'
  echo
  echo -e "${YELLOW}3. エアギャップの tx.signed をBPのcnodeディレクトリにコピーしてください${NC}"
  echo '----------------------------------------'
  echo -e ">> [エアギャップ] ⇒ ${GREEN}tx.signed${NC} ⇒ [BP]"
  echo '----------------------------------------'
  echo
}


#プールデータAPI取得
get_pooldata(){
  #APIリクエストクエリjson生成
  pId_json="{\""_pool_bech32_ids"\":[\""$(cat $NODE_HOME/$POOL_ID_BECH32_FILENAME)"\"]}"
  #API プールデータ取得
  curl -s -X POST "$KOIOS_API/pool_info" \
  -H "Accept: application/json" \
  -H "Content-Type: application/json" \
  -d $pId_json > $NODE_HOME/pooldata.txt
  wait

  pooldata_chk=$(cat $NODE_HOME/pooldata.txt)
  if [[ $pooldata_chk != *"pool_id_bech32"* ]]; then
    echo "APIからプールデータを取得できませんでした。再度お試しください"
    Gum_OneSelect "戻る"
  fi
}

select_port(){
case $1 in
  "node" )
    local min_range=49152
    local max_range=57343
    case $NODE_TYPE in
      "ブロックプロデューサー" )
        local loop_count=5
        port_set=""
      ;;

      "リレー" )
        local loop_count=3
        port_set="3000 3001 6000 6001"
      ;;
    esac
    ;;
  "ssh" )
      local min_range=57344
      local max_range=65535
      local loop_count=5
      port_set=""
    ;;
esac

  for i in $(seq 1 $loop_count); do
    port_set="$port_set $(($min_range + RANDOM % ($max_range - $min_range + 1)))"
  done

    port_set="$port_set カスタム"

  port_number=$(gum choose --header.foreground="244" --header="任意ポート番号を設定してください" --no-show-help $port_set)
  if [[ $port_number == "カスタム" ]]; then
    while :
    do
      port_number=$(gum input --char-limit=5 --no-show-help --placeholder="任意のポート番号を入力してください")
      if [[ $port_number =~ ^[0-9]+$ ]]; then
        break
      else
        echo
        echo "$整数を入力してください"
        echo
        sleep 2
      fi
    done
  fi
  echo $port_number
}


#----------CLI関数----------------

Cli_CurrentSlot(){
  currentSlot=$(cardano-cli query tip $NODE_NETWORK | jq -r '.slot')
}


#--------------------
## Gum関連関数
#--------------------

style(){
  printf '{{ Color "15" "'"$1"'" }}''{{ Color "11" " '"$2"' " }}' | gum format -t template; echo
}

YellowStyle(){
  printf '{{ Color "11" "'"$1"'" }}' | gum format -t template; echo
}

MagentaStyle(){
  printf '{{ Color "127" "'"$1"'" }}' | gum format -t template; echo
}

PinkStyle(){
  printf '{{ Color "127" "'"$1"'" }}' | gum format -t template; echo
}

GreenStyle(){
  printf '{{ Color "2" "'"$1"'" }}' | gum format -t template; echo
}

CyanStyle(){
  printf '{{ Color "6" "'"$1"'" }}' | gum format -t template; echo
}

LglayStyle(){
  printf '{{ Color "249" "'"$1"'" }}' | gum format -t template; echo
}

DglayStyle(){
  printf '{{ Color "242" "'"$1"'" }}' | gum format -t template; echo
}

ErrorStyle(){
  printf '{{ Color "196" "'"$1"'" }}' | gum format -t template; echo
}

#spin
Gum_DotSpinner3(){
    gum spin --spinner dot --title ${1} -- sleep 3
}

Gum_DotSpinner(){
    gum spin --spinner dot --title ${1} -- ${2}
}

Gum_Fnspin() {
    local TITLE="${*: -1}"
    local COMMANDO="${*:1:$(($# - 1))}"
    gum spin --spinner="dot" --title="$TITLE" --show-output -- bash -c "source ../spokit.library && $COMMANDO"
}

Gum_OneSelect(){
  echo
  gum choose --header.foreground="244" --header="" --height=1 --no-show-help "${1}"
  return
}

Gum_Confirm_YesNo(){
  gum confirm "${1}" --default=true --affirmative="はい" --negative="いいえ" --no-show-help && iniSettings="${2}" || iniSettings="${3}"
  echo
}