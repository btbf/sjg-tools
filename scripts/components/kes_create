#!/bin/bash

#KES作成
KesCreate(){
    case ${1} in
    "ブロックプロデューサー" )
      #KEStimenig
      slotNumInt=$(curl -s http://localhost:12798/metrics | grep cardano_node_metrics_slotNum_int | awk '{ print $2 }')
      kesTiming=$(echo "scale=6; ${slotNumInt} / 129600" | bc | awk '{printf "%.5f\n", $0}')

      echo '------------------------------------------------------------------------'
      echo "KES作成(更新)作業にはブロックプロデューサーとエアギャップを使用します"
      echo
      echo -e "■ 実行フロー"
      echo ' 1.KESファイル/CERTファイル作成(バックアップ)'
      echo ' 2.新規KESファイル作成'
      echo " 3.KESファイルをエアギャップへコピー"
      echo ' 4.エアギャップ操作/CERTファイルBPコピー(手動)'
      echo ' 5.ノード再起動'
      echo '------------------------------------------------------------------------'
      echo
      echo "KESファイルを更新する前に、1時間以内にブロック生成スケジュールが無いことを確認してください"
      echo
      Gum_Confirm_YesNo "KES更新作業を開始しますか？" "Yes" "最初からやり直す場合はツールを再実行してください"
      
      if [ "$iniSettings" != "Yes" ]; then return 1; fi

      echo 
      echo  "KES更新タイミングチェック:$(MagentaStyle ${kesTiming})"
      sleep 1

      kesTimingDecimal=${kesTiming#*.}
      if [ ${kesTimingDecimal} -ge 99800 ]; then
        echo "KesStartがもうすぐ切り替わります(${kesTiming})"
        nextkes=$(echo ${kesTiming} | awk '{echo("%d\n",$1+1)}')
        echo "startKesPeriodが$nextkesへ切り替わってから再度実行してください"
        select_rtn
      else
        GreenStyle "OK"
      fi
      Gum_DotSpinner3 "準備中"
      echo
      #最新ブロックカウンター番号チェック
      if [ -e ${NODE_HOME}/${NODE_CERT_FILENAME} ]; then
        cardano-cli query kes-period-info $NODE_NETWORK --op-cert-file ${NODE_HOME}/${NODE_CERT_FILENAME} --out-file ${NODE_HOME}/kesperiod.json
        lastBlockCnt=$(cat ${NODE_HOME}/kesperiod.json | jq -r '.qKesNodeStateOperationalCertificateNumber')
        rm ${NODE_HOME}/kesperiod.json
      fi
    
      #現在のKESPeriod算出
      slotNo=$(cardano-cli query tip $NODE_NETWORK | jq -r '.slot')
      slotsPerKESPeriod=$(cat ${NODE_HOME}/${NODE_CONFIG}-shelley-genesis.json | jq -r '.slotsPerKESPeriod')
      kesPeriod=$(( ${slotNo} / ${slotsPerKESPeriod} ))
      startKesPeriod=${kesPeriod}
      
      kesfolder="${NODE_HOME}/kes-backup"
      if [ ! -e "${kesfolder}" ]; then
        mkdir $kesfolder
        echo "$kesfolderディレクトリを作成しました"
      fi

      date=$(date +\%Y\%m\%d\%H\%M)
      if [ -e "${NODE_HOME}/${KES_SKEY_FILENAME}" ]; then
        MagentaStyle "■旧KESファイルのバックアップ..."
        cp ${NODE_HOME}/${KES_VKEY_FILENAME} $kesfolder/$date-${KES_VKEY_FILENAME}
        YellowStyle "${NODE_HOME}/${KES_VKEY_FILENAME} を $kesfolder/$date-${KES_VKEY_FILENAME}へコピーしました"
        cp ${NODE_HOME}/${KES_SKEY_FILENAME} $kesfolder/$date-${KES_SKEY_FILENAME}
        YellowStyle "${NODE_HOME}/${KES_SKEY_FILENAME} を $kesfolder/$date-${KES_SKEY_FILENAME}へコピーしました"
        cp ${NODE_HOME}/${NODE_CERT_FILENAME} $kesfolder/$date-${NODE_CERT_FILENAME}
        YellowStyle "${NODE_HOME}/${NODE_CERT_FILENAME} を $kesfolder/$date-${NODE_CERT_FILENAME}へコピーしました"

        # チェックするディレクトリを指定
        # 特定のファイル名に含まれる文字列を指定（3種類）
        oldKessKey="*${KES_SKEY_FILENAME}"
        oldKesvKey="*${KES_VKEY_FILENAME}"
        oldNodecertKey="*${NODE_CERT_FILENAME}"

        # 関数: 古いファイルを削除する
        KesCleanupFiles() {
          local pattern=${1}
          local dir=${2}
          
          # 該当するファイルをリストアップ
          file_list=$(ls -1t ${dir} | grep ${pattern})
          
          # 該当するファイル数を取得
          file_count=$(echo "${file_list}" | wc -l)
          
          # ファイルが5つ以上ある場合
          if [ "$file_count" -ge 5 ]; then
            # 古いファイルをリストアップし、5番目のファイル以降を削除
            echo "$file_list" | tail -n +6 | while read -r file; do
              rm "$dir/$file"
            done
          fi
        }

        # 各パターンについて関数を呼び出す
        KesCleanupFiles "$oldKessKey" "$kesfolder"
        KesCleanupFiles "$oldKesvKey" "$kesfolder"
        KesCleanupFiles "$oldNodecertKey" "$kesfolder"

        MagentaStyle "${MAGENTA}■旧KESファイルの削除...${NC}"
        sleep 2
        rm ${NODE_HOME}/${KES_VKEY_FILENAME}
        YellowStyle "${NODE_HOME}/${KES_VKEY_FILENAME} を削除しました"
        rm ${NODE_HOME}/${KES_SKEY_FILENAME}
        YellowStyle "${NODE_HOME}/${KES_SKEY_FILENAME} を削除しました"
      fi

      MagentaStyle "■新しいKESファイルの作成..."
      cardano-cli node key-gen-KES --verification-key-file ${NODE_HOME}/${KES_VKEY_FILENAME} --signing-key-file ${NODE_HOME}/${KES_SKEY_FILENAME}
      sleep 5
      
      kesVkey256=$(sha256sum ${NODE_HOME}/${KES_VKEY_FILENAME} | awk '{ print $1 }')
      kesSkey256=$(sha256sum ${NODE_HOME}/${KES_SKEY_FILENAME} | awk '{ print $1 }')


      FilePathAndHash "${NODE_HOME}/${KES_VKEY_FILENAME}"
      FilePathAndHash "${NODE_HOME}/${KES_SKEY_FILENAME}"
      echo "KESキーペアを作成しました"
      sleep 5
      #clear
      read -p "Enter"
      
      sleep 2
      echo
      echo
      echo '■エアギャップオフラインマシンで以下の操作を実施してください'
      echo '(項目1～6まであります)'
      echo
      sleep 2
      echo
      echo -e "${YELLOW}1. BPの${KES_VKEY_FILENAME}と${KES_SKEY_FILENAME} をエアギャップのcnodeディレクトリにコピーしてください${NC}"
      echo '----------------------------------------'
      echo ">> [BP] ⇒ ${KES_VKEY_FILENAME} / ${KES_SKEY_FILENAME} ⇒ [エアギャップ]"
      echo '----------------------------------------'
      sleep 1
      echo
      echo '上記コマンドの戻り値が以下のハッシュ値と等しいか確認する'
      echo
      FilePathAndHash "${NODE_HOME}/${KES_VKEY_FILENAME}"
      FilePathAndHash "${NODE_HOME}/${KES_SKEY_FILENAME}"
      echo
      read -p "上記を終えたらEnterを押して次の操作を表示します"

      clear
      echo
      #lastBlockCnt=" "
      echo "■カウンター番号情報"
      if expr "$lastBlockCnt" : "[0-9]*$" >&/dev/null; then
        counterValue=$(( $lastBlockCnt +1 ))
        echo "チェーン上カウンター番号: ${lastBlockCnt}"
        echo "今回更新のカウンター番号: ${counterValue}"
        echo "node.cert生成時に指定するカウンター番号は\n必ずチェーン上カウンター番号 +1 を指定する必要があります\n\n\n"
      else
        counterValue=0
        echo
        echo "ブロック未生成です"
        echo -e "今回更新のカウンター番号は $counterValue で更新します"
      fi
      echo '■エアギャップオフラインマシンで以下の操作を実施してください'
      echo
      read -p "上記を終えたらEnterを押して次の操作を表示します"

      clear
      echo
      echo '■エアギャップオフラインマシンに以下の数字を入力してください'
      echo
      echo "現在のstartKesPeriod: ${startKesPeriod}"
      sleep 2
      echo
      echo
      echo -e "${YELLOW}6. エアギャップの ${NODE_CERT_FILENAME} をBPのcnodeディレクトリにコピーしてください${NC}"
      echo '----------------------------------------'
      echo ">> [エアギャップ] ⇒ ${NODE_CERT_FILENAME} ⇒ [BP]"
      echo '----------------------------------------'
      echo
      sleep 1

      read -p "操作が終わったらEnterを押してください"

      echo
      echo "新しいKESファイルを有効化するにはノードを再起動する必要があります"
      echo "ノードを再起動しますか？"
      echo
      echo "[1] このまま再起動する　[2] 手動で再起動する"
      echo
      while :
        do
          read -n 1 restartnum
          if [ "$restartnum" == "1" ] || [ "$restartnum" == "2" ]; then
            case ${restartnum} in
              1) 
                sudo systemctl reload-or-restart cardano-node
                echo "\n${GREEN}ノードを再起動しました。${NC}\nglive viewを起動して同期状況を確認してください\n\n"
                echo "${RED}ノード同期完了後、当ツールの[2] ブロック生成状態チェックを実行してください${NC}\n\n"
                break
                ;;
              2) 
                clear
                echo "SPO JAPAN GUILD TOOL Closed!" 
                exit ;;
            esac
            break
          elif [ "$kesnum" == '' ]; then
            echo "入力記号が不正です。再度入力してください\n"
          else
            echo "入力記号が不正です。再度入力してください\n"
          fi
      done
    ;;

    "エアギャップ" )
      echo "ノード運用証明書(${NODE_CERT_FILENAME})を作成します。"
      echo
      echo "ブロックプロデューサーで作成した${KES_SKEY_FILENAME}と${KES_VKEY_FILENAME}を作業ディレクトリ${NODE_HOME}にコピーしてください"
      read -p "コピーしたらEnterを押してください"

      while :
      do
        echo
        echo -e "${YELLOW}2. ファイルハッシュ値確認${NC}"
        echo
        echo -e "${YELLOW}ブロックプロデューサーに表示されているハッシュ値と同じであることを確認してください${NC}"
        echo '----------------------------------------'
        FilePathAndHash "${NODE_HOME}/${KES_VKEY_FILENAME}"
        FilePathAndHash "${NODE_HOME}/${KES_SKEY_FILENAME}"
        echo '----------------------------------------'
        echo
        Gum_Confirm_YesNo "ハッシュ値は同じですか？" "Yes" "新しいKESファイルを${NODE_HOME}にコピーしてください"
        if [ ${iniSettings} == "Yes" ]; then
         break
        else
          echo
          echo "${iniSettings}"
          read -p "コピーしたらEnterを押してください"
        fi
      done
      read -p "操作が終わったらEnterを押してください"

      echo -e "${YELLOW}3. カウンターファイル生成${NC} "
      echo
      inputCounterNum=$(gum input --char-limit=3 --width=100 --header="ブロックプロデューサー側に表示されているカウンター番号を入力してください" --header.foreground="99" --no-show-help --placeholder "Counter Number")


      chmod u+rwx $COLDKEYS_DIR
      cardano-cli node new-counter --cold-verification-key-file $COLDKEYS_DIR/$COLD_VKEY_FILENAME --counter-value $inputCounterNum --operational-certificate-issue-counter-file $COLDKEYS_DIR/$COUNTER_FILENAME

      sleep 1
      echo
      echo -e "${YELLOW}4. カウンター番号確認${NC}"
      echo '----------------------------------------'
      echo
      echo "入力カウンター番号:$inputCounterNum"
      echo "カウンターファイル番号:$(cardano-cli text-view decode-cbor --in-file  $COLDKEYS_DIR/$COUNTER_FILENAME | grep int | head -1 | cut -d"(" -f2 | cut -d")" -f1)"
      echo 
      echo -e "${RED}上記コマンド実行の戻り値が ${YELLOW}$inputCounterNum ${RED}であることを確認してください${NC}"
      echo
      Gum_Confirm_YesNo "カウンター番号は同じですか？" "Yes" "新しいKESファイルを${NODE_HOME}にコピーしてください"

      echo -e "${YELLOW}5. ${NODE_CERT_FILENAME}ファイルを作成する${NC}"
      echo
      inputStartKesPeriod=$(gum input --char-limit=3 --width=100 --header="ブロックプロデューサー側に表示されているstartKesPerod番号を入力してください" --header.foreground="99" --no-show-help --placeholder "startKesPeriod")

      cardano-cli node issue-op-cert --kes-verification-key-file ${NODE_HOME}/${KES_VKEY_FILENAME} --cold-signing-key-file $COLDKEYS_DIR/$COLD_SKEY_FILENAME --operational-certificate-issue-counter $COLDKEYS_DIR/$COUNTER_FILENAME --kes-period ${inputStartKesPeriod} --out-file ${NODE_HOME}/${NODE_CERT_FILENAME}
      if [ $? -eq 0 ]; then
        echo $NODE_HOME/$NODE_CERT_FILENAME ファイルを生成しました。
        chmod a-rwx $COLDKEYS_DIR
      else
        echo "${NODE_CERT_FILENAME}ファイル生成に失敗しました"
      fi

      echo
      echo -e "${YELLOW}6. エアギャップの ${NODE_CERT_FILENAME} をBPのcnodeディレクトリにコピーしてください${NC}"
      echo '----------------------------------------'
      echo ">> [エアギャップ] ⇒ ${NODE_CERT_FILENAME} ⇒ [BP]"
      echo '----------------------------------------'
      echo '----------------------------------------'
      FilePathAndHash "${NODE_HOME}/${NODE_CERT_FILENAME}"
      echo '----------------------------------------'
      echo "BP側で${NODE_CERT_FILENAME}のハッシュ値を確認してください"
      echo
      read -p "コピーしたらEnterを押してください"
    ;;
  esac
}