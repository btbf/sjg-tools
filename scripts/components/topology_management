#!/usr/bin/env bash
# shellcheck disable=SC1091,SC2086,SC1001,SC2317
# shellcheck source="$HOME/.bashrc"

inputConnections(){
#topologyファイル有無確認
if [ -f $NODE_HOME/${NODE_CONFIG}-topology.json ]; then
    echo "$NODE_HOME/${NODE_CONFIG}-topology.json は既に存在します。"
    cat $NODE_HOME/${NODE_CONFIG}-topology.json
    echo
    Gum_Confirm_YesNo "上書きしますか？" "Yes" "No"
    if [[ ${iniSettings} == "No" ]]; then
        echo "処理を中止しました。"
        Gum_OneSelect "メニューに戻る"
        return 1
    fi
fi
topologyAccessPoints=""
while :
do
    inputConnectionNum=$(gum input --value="2" --width=0 --header="接続する${1}数を入力してください" --char-limit=1 --header.foreground="99" --no-show-help --placeholder "Number Of Connections")
    # 入力が数字かどうかを確認
    if [[ "$inputConnectionNum" =~ ^[0-9]+$ ]]; then
    # 配列を使用して変数を管理
    topologyRelays=""

    # ループを実行
    for ((i = 1; i <= $inputConnectionNum; i++)); do
        if [ "$i" -ge "2" ]; then poolRelaySet+="   "; fi

        while :
        do 
            inputAddress=$(gum input --width=0 --header="${1}${i}のIPまたはDNSアドレスを入力してください" --char-limit=255 --header.foreground="99" --no-show-help --placeholder "IP Address or DNS Name")

            # IPv4アドレスの正規表現
            regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"

            # IPアドレスかどうかをチェック
            if [[ $inputAddress =~ $regex ]]; then
                # IP の範囲が 0〜255 かチェック
                IFS='.' read -r a b c d <<< "$inputAddress"
                if ((a <= 255 && b <= 255 && c <= 255 && d <= 255)); then
                    break 1
                else
                    echo "$inputAddress は無効な IP アドレスです（範囲外）"
                fi
            else
                # IPでなければ DNS として nslookup でチェック
                if nslookup "$inputAddress" >/dev/null 2>&1; then
                    break 1
                else
                    echo "$inputAddress は無効なドメインです（DNS解決不可）"
                fi
            fi

        done
        inputPort=$(gum input --value="6000" --width=0 --header="${1}${i}のポート番号を入力してください" --char-limit=255 --header.foreground="99" --no-show-help --placeholder "Port")
        newEntry=$(cat <<EOF
    {
        "address": "${inputAddress}",
        "port": ${inputPort}
    }
EOF
                )
        
        # 最後の要素でなければカンマを付ける
        if [ $i -lt $inputConnectionNum ]; then
            newEntry+=",
"
        fi

        topologyAccessPoints+="$newEntry"
    done

    break 1
    else
    echo "数字を入力してください"
    exit 1
    fi
done
}

topologyManagement(){

case $NODE_CONFIG in
    "mainnet" )
        bootstrapPeers=$(cat <<EOF
    {
    "address": "backbone.cardano.iog.io",
    "port": 3001
    },
    {
    "address": "backbone.mainnet.emurgornd.com",
    "port": 3001
    },
    {
    "address": "backbone.mainnet.cardanofoundation.org",
    "port": 3001
    }
EOF
        )
        peerSnapshotFile=""
    ;;

    "preview" )
        bootstrapPeers=$(cat <<EOF
    {
      "address": "preview-node.play.dev.cardano.org",
      "port": 3001
    }
EOF
        )
        peerSnapshotFile=$(cat <<EOF
"peerSnapshotFile": "preview-peer-snapshot.json",
EOF
        )
    ;;

    "preprod" )
        bootstrapPeers=$(cat <<EOF
    {
      "address": "preprod-node.play.dev.cardano.org",
      "port": 3001
    }
EOF
        )
        peerSnapshotFile=$(cat <<EOF
"peerSnapshotFile": "preprod-peer-snapshot.json",
EOF
        )
    ;;
esac


case $NODE_TYPE in

"ブロックプロデューサー" )

inputConnections "リレー" || return 1

createTopology=$(cat <<- EOF
{
"bootstrapPeers": null,
"localRoots": [
    {
      "accessPoints": [
${topologyAccessPoints}
      ],
      "advertise": true,
      "trustable": true,
      "hotValency": ${inputConnectionNum},
      "warmValency": $((${inputConnectionNum}+1))
    }
],
${peerSnapshotFile}
"publicRoots": [],
"useLedgerAfterSlot": -1 
}
EOF
)
;;

"リレー" )
inputConnections "BP" || return 1
bp_accessPoint=$topologyAccessPoints
bp_connectNum=$inputConnectionNum

inputConnections "リレー" || return 1
relay_accessPoint=$topologyAccessPoints
relay_connectNum=$inputConnectionNum

createTopology=$(cat <<- EOF
{
"bootstrapPeers": [
${bootstrapPeers}
],
"localRoots": [
    {
    "accessPoints": [
${bp_accessPoint}
    ],
      "advertise": false,
      "trustable": true,
      "hotValency": ${bp_connectNum},
      "warmValency": $((${bp_connectNum}+1))
    },
    {
    "accessPoints": [
${relay_accessPoint}
    ],
      "advertise": true,
      "trustable": true,
      "hotValency": ${relay_connectNum},
      "warmValency": $((${relay_connectNum}+1))
    }
],
${peerSnapshotFile}
"publicRoots": [],
"useLedgerAfterSlot": 128908821 
}
EOF
)

;;
esac

echo "${createTopology}"

echo
Gum_Confirm_YesNo "この値で${NODE_TYPE}用のトポロジーファイルを生成しますか？" "Yes" "再度入力してください"
if [[ ${iniSettings} == "Yes" ]]; then
    echo "${createTopology}" > $NODE_HOME/${NODE_CONFIG}-topology.json
    GreenStyle "$NODE_HOME/${NODE_CONFIG}-topology.jsonを生成しました"
    Gum_OneSelect "メニューに戻る"
else
    echo ${iniSettings}
    echo
    Gum_OneSelect "メニューに戻る"
fi
}