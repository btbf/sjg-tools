#!/usr/bin/env bash
# shellcheck disable=SC1091,SC2086,SC1001,SC2317
# shellcheck source="$HOME/.bashrc"

topologyManagement(){
if [ "${NODE_TYPE}" == "ブロックプロデューサー" ]; then

    while :
    do
        inputRelayNum=$(gum input --value="2" --width=0 --header="運用するリレー数を入力してください" --char-limit=1 --header.foreground="99" --no-show-help --placeholder "Number Of Relay")
        # 入力が数字かどうかを確認
        if [[ "$inputRelayNum" =~ ^[0-9]+$ ]]; then
        # 配列を使用して変数を管理
        declare -a inputRelays
        declare -a inputPorts
        topologyRelays=""

        # ループを実行
        for ((i = 1; i <= $inputRelayNum; i++)); do
            if [ "$i" -ge "2" ]; then poolRelaySet+="   "; fi
            inputRelayAddress=$(gum input --width=0 --header="リレー${i}のIPまたはDNSアドレスを入力してください" --char-limit=255 --header.foreground="99" --no-show-help --placeholder "IP Address or DNS Name")
            inputRelays[$i]=${inputRelayAddress}
            inputRelayPort=$(gum input --value="6000" --width=0 --header="リレー${i}のポート番号を入力してください" --char-limit=255 --header.foreground="99" --no-show-help --placeholder "Realy Port")
            inputPorts[$i]=${inputRelayPort}

            # 正規表現でIPv4アドレスの形式をチェック
            if [[ $inputRelayAddress =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
                # 各オクテットが0〜255の範囲内であることをチェック
                IFS='.' read -r -a octets <<< "$inputRelayAddress"
                valid=true
                for octet in "${octets[@]}"; do
                    if (( octet < 0 || octet > 255 )); then
                        valid=false
                        break
                    fi
                done
                if [ "$valid" = true ]; then
                    if [ $i -ne $inputRelayNum ]; then
                    topologyRelays+=$(cat << EOF

    {
    "address": "${inputRelayAddress}",
    "port": ${inputRelayPort}
    },
EOF
)
else
topologyRelays+=$(cat << EOF

    {
    "address": "${inputRelayAddress}",
    "port": ${inputRelayPort}
    }
EOF
)
fi
                else
                    echo "無効なIPアドレスです"
                    break 1
                fi
            else
                if [ $i -ne $inputRelayNum ]; then
                topologyRelays+=$(cat << EOF

    {
    "address": "${inputRelayAddress}",
    "port": ${inputRelayPort}
    },
EOF
)
else
topologyRelays+=$(cat << EOF

    {
    "address": "${inputRelayAddress}",
    "port": ${inputRelayPort}
    }
EOF
)
fi
            fi
        done
        break 1
        else
        echo "数字を入力してください"
        exit 1
        fi
    done
    createTopologyBp=$(cat <<- EOF
{
"bootstrapPeers": null,
"localRoots": [
    {
      "accessPoints": [
        ${topologyRelays}
      ],
      "advertise": false,
      "trustable": true,
      "valency": ${inputRelayNum} 
    }
],
"publicRoots": [],
"useLedgerAfterSlot": -1 
}
EOF
)
    echo "${createTopologyBp}"
    echo "${createTopologyBp}" > $NODE_HOME/${NODE_CONFIG}-topology.json
    echo
    Gum_Confirm_YesNo "この値で${NODE_TYPE}用のトポロジーファイルを生成しますか？" "Yes" "再度入力してください"
    if [[ ${iniSettings} == "Yes" ]]; then
        echo "$NODE_HOME/${NODE_CONFIG}-topology.jsonを生成しました"
    else
        echo ${iniSettings}
        echo
    fi
    elif [ "${NODE_TYPE}" == "リレー" ]; then
    echo "まだ実装していません"
    else
    echo "まだ実装していません"
    fi
}