#!/usr/bin/env bash
# shellcheck disable=SC1091,SC2086,SC1001,SC2317
# shellcheck source="$HOME/.bashrc"

createKeys(){
if [ "${NODE_TYPE}" == "エアギャップ" ] && [ ! -e ${COLDKEYS_DIR} ]; then

    mkdir ${COLDKEYS_DIR}
    cardano-cli node key-gen --cold-verification-key-file ${COLDKEYS_DIR}/${COLD_VKEY_FILENAME} --cold-signing-key-file ${COLDKEYS_DIR}/${COLD_SKEY_FILENAME} --operational-certificate-issue-counter ${COLDKEYS_DIR}/${COUNTER_FILENAME}
    if [ $? -eq 0 ]; then
        echo "コールドキーを読み取り専用で作成しました"
        echo ${COLDKEYS_DIR}/${COLD_VKEY_FILENAME}
        echo ${COLDKEYS_DIR}/${COLD_SKEY_FILENAME}
        echo
        echo "このキーペアはプール運営で最も大切な鍵ファイルであり、紛失するとプール運営を継続できなくなりますのでご注意下さい"
        echo "複数のUSBドライブなどにバックアップを推奨します"
        chmod 400 ${COLDKEYS_DIR}/${COLD_VKEY_FILENAME}; chmod 400 ${COLDKEYS_DIR}/${COLD_SKEY_FILENAME}
        Gum_OneSelect "戻る"
    else
        echo "コールドキーの生成に失敗しました"
    fi
fi
if [[ ${NODE_TYPE} == "ブロックプロデューサー" ]] && [ -e "${NODE_HOME}"/"${KES_SKEY_FILENAME}" ] && [ -e "${NODE_HOME}"/"${KES_VKEY_FILENAME}" ] && [ -e "${NODE_HOME}"/"${NODE_CERT_FILENAME}" ] && [ -e "${NODE_HOME}"/"${VRF_SKEY_FILENAME}" ] && [ -e "${NODE_HOME}"/"${VRF_VKEY_FILENAME}" ]; then
    echo
    echo "以下のBP用ファイルが存在します"
    FilePathAndHash ${NODE_HOME}/${KES_SKEY_FILENAME}
    FilePathAndHash ${NODE_HOME}/${KES_VKEY_FILENAME}
    FilePathAndHash ${NODE_HOME}/${NODE_CERT_FILENAME}
    echo
    FilePathAndHash ${NODE_HOME}/${VRF_VKEY_FILENAME}
    FilePathAndHash ${NODE_HOME}/${VRF_SKEY_FILENAME}
    echo
    Gum_OneSelect "戻る"
    elif [[ ${NODE_TYPE} == "ブロックプロデューサー" ]] && [ ! -e "${NODE_HOME}"/"${VRF_SKEY_FILENAME}" ] && [ ! -e "${NODE_HOME}"/"${VRF_VKEY_FILENAME}" ]; then
    cardano-cli query protocol-parameters $NODE_NETWORK --out-file ${NODE_HOME}/params.json
    cardano-cli node key-gen-VRF --verification-key-file ${NODE_HOME}/${VRF_VKEY_FILENAME} --signing-key-file ${NODE_HOME}/${VRF_SKEY_FILENAME}
    if [ $? -eq 0 ]; then
        echo "VRFキーを読み取り専用で生成しました"
        FilePathAndHash ${NODE_HOME}/${VRF_VKEY_FILENAME}
        FilePathAndHash ${NODE_HOME}/${VRF_SKEY_FILENAME}
        echo
        echo "VRFキーペアはブロック生成で使用する鍵ファイルです。紛失するとブロック生成できなくなりますのでご注意ください"
        echo "複数のUSBドライブなどにバックアップを推奨します"
        chmod 400 ${NODE_HOME}/${VRF_VKEY_FILENAME}; chmod 400 ${NODE_HOME}/${VRF_VKEY_FILENAME}
        echo "ブロックプロデューサーで作成した${VRF_VKEY_FILENAME}と${VRF_VKEY_FILENAME}をエアギャップの作業ディレクトリにコピーしてください"

        read -p "コピーしたらEnterを押してください"
        KesCreate ${NODE_TYPE}
    else
        echo "VRFキーの生成に失敗しました"
        Gum_OneSelect "戻る"
    fi

    else
    echo "キーが見つかりません"
    Gum_OneSelect "戻る"
fi
# KES作成
# node.cert作成
# VRF作成
}


createWallet(){
if [ "${NODE_TYPE}" == "エアギャップ" ] && [ "${walletKeyCheck}" == "❌" ] ; then
    echo "プール運営に必要なウォレットとステークアドレスを作成します"
    echo "それぞれの秘密鍵(skey)、公開鍵(vkey)、アドレスファイル(addr)を生成します"
    echo
    Gum_Confirm_YesNo "作成してよろしいですか？" "Yes" "最初からやり直す場合はツールを再実行してください"

    if [ "${iniSettings}" == "Yes" ]; then
        cardano-cli address key-gen --verification-key-file ${NODE_HOME}/${PAYMENT_VKEY_FILENAME} --signing-key-file ${NODE_HOME}/${PAYMENT_SKEY_FILENAME}
        cardano-cli stake-address key-gen --verification-key-file ${NODE_HOME}/${STAKE_VKEY_FILENAME} --signing-key-file ${NODE_HOME}/${STAKE_SKEY_FILENAME}
        cardano-cli address build --payment-verification-key-file ${NODE_HOME}/${PAYMENT_VKEY_FILENAME} --stake-verification-key-file ${NODE_HOME}/${STAKE_VKEY_FILENAME} --out-file ${NODE_HOME}/${PAYMENT_ADDR_FILENAME} ${NODE_NETWORK}
        cardano-cli stake-address build --stake-verification-key-file ${NODE_HOME}/${STAKE_VKEY_FILENAME} --out-file ${NODE_HOME}/${STAKE_ADDR_FILENAME} ${NODE_NETWORK}
        cardano-cli stake-address registration-certificate --stake-verification-key-file ${NODE_HOME}/${STAKE_VKEY_FILENAME} --out-file ${NODE_HOME}/${STAKE_CERT_FILENAME}

        chmod 400 ${NODE_HOME}/${PAYMENT_VKEY_FILENAME}
        chmod 400 ${NODE_HOME}/${PAYMENT_SKEY_FILENAME}
        chmod 400 ${NODE_HOME}/${STAKE_VKEY_FILENAME}
        chmod 400 ${NODE_HOME}/${STAKE_SKEY_FILENAME}
        chmod 400 ${NODE_HOME}/${STAKE_ADDR_FILENAME}
        chmod 400 ${NODE_HOME}/${PAYMENT_ADDR_FILENAME}

        echo
        echo "ウォレットキーペアを以下のパスに生成しました"
        find ${NODE_HOME} -type f -name "payment.*key"
        find ${NODE_HOME} -type f -name "stake.*key"
        YellowStyle "skeyを紛失するとアドレス内の資産を失うことになりますのでご注意下さい"
        echo "複数USBドライブなどにバックアップすることをおすすめします"
        echo
        echo "アドレスファイルを以下のパスに生成しました"
        find ${NODE_HOME} -type f -name "${PAYMENT_ADDR_FILENAME}"
        find ${NODE_HOME} -type f -name "${STAKE_ADDR_FILENAME}"
        echo
        echo "ステーク証明書を以下のパスに生成しました"
        find ${NODE_HOME} -type f -name "${STAKE_CERT_FILENAME}"
        echo
        echo "以下の3ファイルをブロックプロデューサーの作業ディレクトリ(~/cnode) にコピーしてください。"
        YellowStyle "${PAYMENT_ADDR_FILENAME}"
        YellowStyle "${STAKE_ADDR_FILENAME}"
        YellowStyle "${STAKE_CERT_FILENAME}"
        echo
        Gum_OneSelect "戻る"
        echo
    else
        echo
        echo "${iniSettings}"
        echo
        Gum_OneSelect "戻る"
    fi
else
    echo "ウォレット作成済みです"
    echo
    style "ウォレットアドレス：" "$(echo $(cat ${NODE_HOME}/${PAYMENT_ADDR_FILENAME}))"
    style "ステークアドレス：" "$(echo $(cat ${NODE_HOME}/${STAKE_ADDR_FILENAME}))"
    echo
    Gum_OneSelect "戻る"
fi
}


signStakeAddressTx(){
    cardano-cli transaction sign --tx-body-file ${NODE_HOME}/tx.raw --signing-key-file ${NODE_HOME}/${PAYMENT_SKEY_FILENAME} --signing-key-file ${NODE_HOME}/${STAKE_SKEY_FILENAME} $NODE_NETWORK --out-file ${NODE_HOME}/tx.signed
    echo
    echo "トランザクション署名ファイルを生成しました"
    echo "${NODE_HOME}/tx.signed をBPの作業ディレクトリにコピーしてください"
    echo
    Gum_OneSelect "コピーしたらEnterを押して下さい"
}


signPoolRegisterTx(){
    chmod u+rwx $HOME/cold-keys
    cardano-cli transaction sign --tx-body-file ${NODE_HOME}/tx.raw  --signing-key-file ${NODE_HOME}/${PAYMENT_SKEY_FILENAME} --signing-key-file ${COLDKEYS_DIR}/${COLD_SKEY_FILENAME} --signing-key-file ${NODE_HOME}/${STAKE_SKEY_FILENAME} $NODE_NETWORK --out-file ${NODE_HOME}/tx.signed
    echo
    echo "プール登録Tx署名ファイルを生成しました"
    echo "${NODE_HOME}/tx.signed をBPの作業ディレクトリにコピーしてください"
    echo
    Gum_OneSelect "コピーしたらEnterを押して下さい"
}



CreatePoolCert(){
  while :
  do
    inputPledge=$(gum input --width=0 --header="Pledge誓約ADAを整数で入力して下さい(1-1000000)" --char-limit=7 --header.foreground="99" --no-show-help --placeholder "Pledge")
    inputFixCost=$(gum input --value="170" --width=0 --header="固定手数料を整数で入力してください(170以上)" --char-limit=5 --header.foreground="99" --no-show-help --placeholder "Fix Cost")
    inputFixMargin=$(gum input --value="0.5" --width=0 --header="変動手数料を入力してください(%不要)" --char-limit=3 --header.foreground="99" --no-show-help --placeholder "0.5 or 1.5 or 3 etc...")

    while :
    do
      inputRelayNum=$(gum input --value="2" --width=0 --header="チェーンに登録するリレー数を入力してください" --char-limit=1 --header.foreground="99" --no-show-help --placeholder "Number Of Relay")
        # 入力が数字かどうかを確認
      if [[ "$inputRelayNum" =~ ^[0-9]+$ ]]; then
        # 配列を使用して変数を管理
        declare -a inputRelays
        declare -a inputPorts

        # ループを実行
        for ((i = 1; i <= $inputRelayNum; i++)); do
          if [ "$i" -ge "2" ]; then poolRelaySet+="   "; fi
          inputRelayAddress=$(gum input --width=0 --header="リレー${i}のIPまたはDNSアドレスを入力してください" --char-limit=255 --header.foreground="99" --no-show-help --placeholder "IP Address or DNS Name")
          inputRelays[$i]=${inputRelayAddress}
          inputRelayPort=$(gum input --value="6000" --width=0 --header="リレー${i}のポート番号を入力してください" --char-limit=255 --header.foreground="99" --no-show-help --placeholder "Realy Port")
          inputPorts[$i]=${inputRelayPort}

          # 正規表現でIPv4アドレスの形式をチェック
          if [[ $inputRelayAddress =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
              # 各オクテットが0〜255の範囲内であることをチェック
              IFS='.' read -r -a octets <<< "$inputRelayAddress"
              valid=true
              for octet in "${octets[@]}"; do
                  if (( octet < 0 || octet > 255 )); then
                      valid=false
                      break
                  fi
              done
              if [ "$valid" = true ]; then
                  poolRelaySet+="--pool-relay-ipv4 ${inputRelayAddress}   --pool-relay-port ${inputRelayPort}"
              else
                  echo "無効なIPアドレスです"
                  break 1
              fi
          else
              poolRelaySet+="--single-host-pool-relay ${inputRelayAddress}   --pool-relay-port ${inputRelayPort}"
          fi
        done
        break 1
      else
        echo "数字を入力してください"
        exit 1
      fi
    done
    inputMetaUrl=$(gum input --value="http://xstakepool.com/poolMetaData.json" --width=0 --header="poolMetaData.jsonのホストURLを入力してください" --char-limit=64 --header.foreground="99" --no-show-help --placeholder "Pool Homepage URL")

    # ヘッダー行を出力
    echo -e "誓約(Pledge)" ${B_YELLOW}"${inputPledge}ADA"${NC} >> table.out
    echo -e "固定手数料" "${inputFixCost}ADA"  >> table.out
    echo -e "変動手数料" "${inputFixMargin}%" >> table.out
    echo -e "登録リレー数" "$inputRelayNum"  >> table.out

    for ((i = 1; i <= $inputRelayNum; i++)); do
      echo -e "リレー$iアドレス" "${inputRelays[$i]}"  >> table.out
      echo -e "リレー$iポート" "${inputPorts[$i]}"  >> table.out
    done
    echo -e "メタデータURL" "${inputMetaUrl}"  >> table.out
    column -t < table.out
    rm table.out

echo
echo "pool.cert生成実行コマンド確認"
echo "コマンド上の入力数字はLovelace形式です"
cmdPoolCert=$(cat << EOF
cardano-cli stake-pool registration-certificate \
  --cold-verification-key-file ${COLDKEYS_DIR}/${COLD_VKEY_FILENAME} \
  --vrf-verification-key-file ${NODE_HOME}/${VRF_VKEY_FILENAME} \
  --pool-pledge $(echo "${inputPledge}000000") \
  --pool-cost $(echo "${inputFixCost}000000") \
  --pool-margin $(echo 0)$(echo "scale=3; ${inputFixMargin} / 100" | bc) \
  --pool-reward-account-verification-key-file ${NODE_HOME}/${STAKE_VKEY_FILENAME} \
  --pool-owner-stake-verification-key-file ${NODE_HOME}/${STAKE_VKEY_FILENAME} \
  $NODE_NETWORK \
  $poolRelaySet \
  --metadata-url ${inputMetaUrl} \
  --metadata-hash $(cat ${NODE_HOME}/poolMetaDataHash.txt) \
  --out-file ${NODE_HOME}/${POOL_CERT_FILENAME}
EOF
)
    echo
    echo -e ${GRAY}"$cmdPoolCert"${NC} | sed 's/   / \\\n/g'
    echo
    Gum_Confirm_YesNo "この値で${POOL_CERT_FILENAME}を生成しますか？" "Yes" "再度入力してください"
    if [[ ${iniSettings} == "Yes" ]]; then
      echo
      chmod u+rwx $HOME/cold-keys
      eval $cmdPoolCert
      echo プール登録証明書 ${YELLOW}"${NODE_HOME}/${POOL_CERT_FILENAME}${NC} を生成しました"
      echo
      cardano-cli stake-address delegation-certificate --stake-verification-key-file ${NODE_HOME}/${STAKE_VKEY_FILENAME} --cold-verification-key-file ${COLDKEYS_DIR}/${COLD_VKEY_FILENAME} --out-file ${NODE_HOME}/deleg.cert
      chmod u+rwx ${COLDKEYS_DIR}
      cardano-cli stake-pool id --cold-verification-key-file ${COLDKEYS_DIR}/${COLD_VKEY_FILENAME} --output-format bech32 --out-file ${NODE_HOME}/pool.id-bech32
      cardano-cli stake-pool id --cold-verification-key-file ${COLDKEYS_DIR}/${COLD_VKEY_FILENAME} --output-format hex --out-file ${NODE_HOME}/pool.id
      chmod a-rwx ${COLDKEYS_DIR}
      echo -e "委任証明書 ${YELLOW}${NODE_HOME}/deleg.cert${NC} を生成しました"
      echo -e "プールID(Bech32) ${YELLOW}${NODE_HOME}/pool.id-bech32${NC} を生成しました"
      echo -e "プールID(hex) ${YELLOW}${NODE_HOME}/pool.id${NC} を生成しました"
      echo
      echo -e "以下のファイルをBPの作業ディレクトへコピーしてください${NC}"
      echo "${NODE_HOME}/${POOL_CERT_FILENAME}"
      echo "${NODE_HOME}/deleg.cert"
      echo "${NODE_HOME}/pool.id-bech32"
      echo "${NODE_HOME}/pool.id"
      echo '----------------------------------------'
      echo ">> [エアギャップ] ⇒ [BP作業ディレクトリ]"
      echo '----------------------------------------'
      echo
      Gum_OneSelect "BPにコピーしたらEnterを押して下さい"
      break 1
    else
      echo ${iniSettings}
      echo
    fi
  done


}