#!/bin/bash

recommend_node_version="10.5.1"
recommend_cabal_vrtsion="3.12.1.0"
recommend_ghc_vrtsion="9.6.5"


LibsodiumInstall(){
#Libsodium Install
  sleep 3
  cd ${HOME}/git || exit
  git clone https://github.com/IntersectMBO/libsodium
  cd libsodium || exit
  git checkout $SODIUM_VERSION
  ./autogen.sh
  ./configure
  make
  sudo make install
  YellowStyle "Libsodiumインストール完了"
}

Secp256k1Install(){
  sleep 3
  cd ${HOME}/git || exit
  git clone https://github.com/bitcoin-core/secp256k1.git
  cd secp256k1/ || exit
  git checkout $SECP256K1_VERSION
  ./autogen.sh
  ./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental
  make
  sudo make install
  YellowStyle "Secp256k1インストール完了"
}

BlstInstall(){
  sleep 3
  cd ${HOME}/git || exit
  git clone https://github.com/supranational/blst
  cd blst || exit
  git checkout $BLST_VERSION
  ./build.sh

  cat <<-EOF >libblst.pc
		prefix=/usr/local
		exec_prefix=\${prefix}
		libdir=\${exec_prefix}/lib
		includedir=\${prefix}/include

		Name: libblst
		Description: Multilingual BLS12-381 signature library
		URL: https://github.com/supranational/blst
		Version: ${BLST_VERSION#v}
		Cflags: -I\${includedir}
		Libs: -L\${libdir} -lblst
		EOF

  sudo cp libblst.pc /usr/local/lib/pkgconfig/
  sudo cp bindings/blst_aux.h bindings/blst.h bindings/blst.hpp  /usr/local/include/
  sudo cp libblst.a /usr/local/lib
  sudo chmod u=rw,go=r /usr/local/{lib/{libblst.a,pkgconfig/libblst.pc},include/{blst.{h,hpp},blst_aux.h}}
  YellowStyle "blstインストール完了"
}

GhcupInstall(){
  sleep 3
  cd ${HOME} || exit
  BOOTSTRAP_HASKELL_NONINTERACTIVE=1
  BOOTSTRAP_HASKELL_NO_UPGRADE=1
  BOOTSTRAP_HASKELL_ADJUST_BASHRC=1
  unset BOOTSTRAP_HASKELL_INSTALL_HLS
  export BOOTSTRAP_HASKELL_NONINTERACTIVE BOOTSTRAP_HASKELL_NO_UPGRADE BOOTSTRAP_HASKELL_ADJUST_BASHRC

  curl -s --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | bash

  source ${HOME}/.ghcup/env
  ghcup upgrade
  ghcup install cabal $recommend_cabal_vrtsion
  ghcup set cabal $recommend_cabal_vrtsion

  ghcup install ghc $recommend_ghc_vrtsion
  ghcup set ghc $recommend_ghc_vrtsion

  cabal update
  cabal --version; ghc --version
  YellowStyle "GHCUPインストール完了"
}


NodeDownload(){
  nodeBinary_URL="https://github.com/IntersectMBO/cardano-node/releases/download/${1}/cardano-node-${1}-linux.tar.gz"
  wget --spider -q "$nodeBinary_URL"
  local status=$?
  if [ $status -eq 0 ]; then
    LglayStyle "ノードインストール開始"
    mkdir -p ${HOME}/git/cardano-node
    cd ${HOME}/git/cardano-node || exit
    wget -q "$nodeBinary_URL"
    tar zxvf "cardano-node-${1}-linux.tar.gz" ./bin/cardano-node ./bin/cardano-cli > /dev/null 2>&1
    sudo cp "$(find ${HOME}/git/cardano-node -type f -name "cardano-cli")" /usr/local/bin/cardano-cli
    sudo cp "$(find ${HOME}/git/cardano-node -type f -name "cardano-node")" /usr/local/bin/cardano-node
  else
    echo "リリースバージョンではないためソースコードからビルドします"
    #Libsodiumインストール
    LibsodiumInstall
    #Secp256インストール
    Secp256k1Install
    #Blstインストール
    BlstInstall
    #GHCUPインストール
    GhcupInstall

    cd $HOME/git
    gitURL="https://github.com/IntersectMBO/cardano-node.git"
    echo "git-URL: $(DglayStyle $gitURL)" 
    git clone $gitURL
    cd cardano-node
    git fetch --quiet --all --recurse-submodules --tags
    git checkout --quiet tags/$1
    echo "git tag:$(DglayStyle $1)"
    cabal clean
    cabal update
    cabal configure --with-compiler=ghc-$recommend_ghc_vrtsion

    LglayStyle "ソースコードからビルド開始..."
    YellowStyle "この作業は30分以上かかる場合があります"
    cabal build all cardano-cli
    local node_install_status=$?
    if [[ $node_install_status -eq 0 ]]; then
      GreenStyle "ビルド成功"
      echo
      sudo cp $(./scripts/bin-path.sh cardano-cli) /usr/local/bin/cardano-cli
      sudo cp $(./scripts/bin-path.sh cardano-node) /usr/local/bin/cardano-node
    else
      node_install_result="failure"
    fi
  fi

  rm -rf ${HOME}/git/cardano-node
  YellowStyle "ノード(v${1})をインストールしました"
  sleep 2
}


NodeConfigDownload(){
  LglayStyle "ノード設定ファイルをダウンロードします..."
  sleep 2
  mkdir -p ${NODE_HOME}
  cd ${NODE_HOME} || exit
  wget -q https://spojapanguild.net/node_config/${recommend_node_version}/${NODE_CONFIG}-byron-genesis.json -O ${NODE_CONFIG}-byron-genesis.json
  wget -q https://spojapanguild.net/node_config/${recommend_node_version}/${NODE_CONFIG}-topology.json -O ${NODE_CONFIG}-topology.json
  wget -q https://spojapanguild.net/node_config/${recommend_node_version}/${NODE_CONFIG}-shelley-genesis.json -O ${NODE_CONFIG}-shelley-genesis.json
  wget -q https://spojapanguild.net/node_config/${recommend_node_version}/${NODE_CONFIG}-alonzo-genesis.json -O ${NODE_CONFIG}-alonzo-genesis.json
  wget -q https://spojapanguild.net/node_config/${recommend_node_version}/${NODE_CONFIG}-conway-genesis.json -O ${NODE_CONFIG}-conway-genesis.json
  wget -q https://spojapanguild.net/node_config/${recommend_node_version}/${NODE_CONFIG}-checkpoints.json -O ${NODE_CONFIG}-checkpoints.json
  wget -q https://spojapanguild.net/node_config/${recommend_node_version}/${NODE_CONFIG}-peer-snapshot.json -O ${NODE_CONFIG}-peer-snapshot.json
  if [ "${NODE_TYPE}" = "リレー" ]; then
    wget -q https://spojapanguild.net/node_config/${recommend_node_version}/${NODE_CONFIG}-config.json -O ${NODE_CONFIG}-config.json
  else
    wget -q https://spojapanguild.net/node_config/${recommend_node_version}/${NODE_CONFIG}-config-bp.json -O ${NODE_CONFIG}-config.json
  fi
  #

  YellowStyle "ノード設定ファイルをダウンロードしました"
}

GliveViewDowndload(){
  sleep 2
  mkdir -p ${NODE_HOME}/scripts
  cd ${NODE_HOME}/scripts || exit
  sudo sudo apt install bc tcptraceroute -y > /dev/null 2>&1

  curl -s -o gLiveView.sh https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/gLiveView.sh
  curl -s -o env https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/env
  chmod 755 gLiveView.sh

  sed -i ${NODE_HOME}/scripts/env \
  -e '1,73s!#CNODE_HOME="/opt/cardano/cnode"!CNODE_HOME=${NODE_HOME}!' \
  -e '1,73s!#CNODE_PORT=6000!CNODE_PORT='"${1}"'!' \
  -e '1,73s!#UPDATE_CHECK="Y"!UPDATE_CHECK="N"!' \
  -e '1,73s!#CONFIG="${CNODE_HOME}/files/config.json"!CONFIG="${CNODE_HOME}/'${NODE_CONFIG}'-config.json"!' \
  -e '1,73s!#SOCKET="${CNODE_HOME}/sockets/node0.socket"!SOCKET="${CNODE_HOME}/db/socket"!'

  YellowStyle "gliveViewをインストールしました..."
}

#ノードインストール
NodeInstall(){
  node_path=$(which cardano-node)
  if [ ! -e "${node_path}" ]; then
  clear
  case "$NODE_TYPE" in

  "ブロックプロデューサー" )
    node_run_filename="startBlockProducingNode.sh"
    ;;
  "リレー" )
    node_run_filename="startRelayNode1.sh"
    ;;
  esac

  Header "ノードインストール"
  echo
  sleep 2

  #ノードバージョン選択

  repo=IntersectMBO/cardano-node
  latest_node_version=$(curl -s --url "https://api.github.com/repos/$repo/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")')
  # if [[ $SYNC_NETWORK == "mainnet" ]]; then

    #推奨と最新に差異がある場合
    if [[ $latest_node_version != $recommend_node_version ]]; then
      echo
      printf "最新バージョン: $(YellowStyle $latest_node_version)\n"
      printf "SJG推奨バージョン: $(GreenStyle $recommend_node_version)\n"

      echo
      echo "最新バージョンとSJG推奨バージョンとに差異があります"
      echo "最新バージョンは現在SJGで検証中のため次のリリースをお待ちください。最新バージョンをインストールしたい場合は手動インストールを行ってください"
      echo
    fi

    Gum_Confirm_YesNo "SJG推奨バージョン: $(GreenStyle $recommend_node_version) をインストールしますか？" "Yes" "No"
    select_node_version=$recommend_node_version

    if [[ $iniSettings == "Yes" ]]; then
      IOHKNIX_VERSION=$(curl -s https://raw.githubusercontent.com/IntersectMBO/cardano-node/$select_node_version/flake.lock | jq -r '.nodes.iohkNix.locked.rev')
      SODIUM_VERSION=$(curl -s https://raw.githubusercontent.com/input-output-hk/iohk-nix/$IOHKNIX_VERSION/flake.lock | jq -r '.nodes.sodium.original.rev')
      SECP256K1_VERSION=$(curl -s https://raw.githubusercontent.com/input-output-hk/iohk-nix/$IOHKNIX_VERSION/flake.lock | jq -r '.nodes.secp256k1.original.ref')
      BLST_VERSION=$(curl -s https://raw.githubusercontent.com/input-output-hk/iohk-nix/master/flake.lock | jq -r '.nodes.blst.original.ref')
    else
      return
    fi

  # else
  #   #テストネット用
  #   version_list=$(curl -s "https://api.github.com/repos/$repo/releases" \
  # | jq -r '.[].tag_name' \
  # | head -n 2 \
  # | while read tag; do
  #     echo -n "$tag "
  #     count=$((count + 1))
  #   done
  #   echo -n "${tag}キャンセル"
  #   )

  #   printf "最新バージョン: $(YellowStyle $latest_node_version)\n"
  #   select_node_version=$(gum choose --header.foreground="244" --header="インストールするノードバージョンを選択してください" --no-show-help $version_list)
  #   printf "選択バージョン: $(GreenStyle $select_node_version)\n"
  # fi
  # echo
  # if [[ $select_node_version != "キャンセル" ]]; then

  # fi

  #ノード起動ポート選択
  select_port "node"
  
  SystemUpdate
  
  #ノードバイナリダウンロード
  NodeDownload $select_node_version

  if [[ $node_install_result == "failure" ]]; then
    ErrorStyle "ビルド失敗"
    Gum_OneSelect "戻る"
    return
  fi
  #ノードコンフィグファイルダウンロード
  NodeConfigDownload

cat <<-EOF > ${NODE_HOME}/${node_run_filename}
#!/bin/bash
DIRECTORY=${NODE_HOME}
PORT=${port_number}
HOSTADDR=0.0.0.0
TOPOLOGY=\${DIRECTORY}/${NODE_CONFIG}-topology.json
DB_PATH=\${DIRECTORY}/db
SOCKET_PATH=\${DIRECTORY}/db/socket
CONFIG=\${DIRECTORY}/${NODE_CONFIG}-config.json
/usr/local/bin/cardano-node +RTS -N --disable-delayed-os-memory-return -I0.1 -Iw300 -A16m -F1.5 -H2500M -RTS run --topology \${TOPOLOGY} --database-path \${DB_PATH} --socket-path \${SOCKET_PATH} --host-addr \${HOSTADDR} --port \${PORT} --config \${CONFIG}
EOF

  cd ${NODE_HOME} || exit
  chmod +x ${node_run_filename}

  YellowStyle "起動スクリプトを作成しました"

  #gLiveViewインストール
  GliveViewDowndload $port_number

  #Mithril DBブートストラップ
  MithrilBootStrap

  sleep 2
cat > ${NODE_HOME}/cardano-node.service <<-EOF
# The Cardano node service (part of systemd)
# file: /etc/systemd/system/cardano-node.service

[Unit]
Description     = Cardano node service
Wants           = network-online.target
After           = network-online.target

[Service]
User            = ${USER}
Type            = simple
WorkingDirectory= ${NODE_HOME}
ExecStart       = /bin/bash -c '${NODE_HOME}/${node_run_filename}'
KillSignal=SIGINT
RestartKillSignal=SIGINT
TimeoutStopSec=300
LimitNOFILE=32768
Restart=always
RestartSec=5
SyslogIdentifier=cardano-node

[Install]
WantedBy    = multi-user.target
EOF

  sudopass=$(InputSudoPass)
  echo "$sudopass" | sudo -S cp ${NODE_HOME}/cardano-node.service /etc/systemd/system/cardano-node.service
  sudo chmod 644 /etc/systemd/system/cardano-node.service
  sudo systemctl daemon-reload
  sudo systemctl enable cardano-node
  sudo systemctl start cardano-node

  YellowStyle "ノード起動サービスファイルを作成しました"
  LglayStyle "カルダノノード起動中..."
  nodeSyncCheck
  if [[ -n $slot_value ]]; then
    echo
    YellowStyle "日常オペレーションでノードの起動状況を確認するには、glive コマンドを使用してください。"
    Gum_OneSelect "戻る"
    echo
  else
    echo "ノード起動に失敗しました"
    echo "エラーメッセージの原因を解決してください"
    Gum_OneSelect "戻る"
  fi
else 
  cardano-node version
  cardano-cli version
  echo
  YellowStyle "cardano-nodeはインストール済みです"
  Gum_OneSelect "戻る"
fi
}


NodeVirsionUp(){
  echo "起動中のノードを停止します..."

  sudopass=$(InputSudoPass)
  echo "$sudopass" | sudo -S systemctl stop cardano-node
  echo "ノードを停止しました"
  
  SystemUpdate
  NodeVersionSelect
  if [[ $select_node_version == "キャンセル" ]]; then
    echo "アップデートはキャンセルされました"
    Gum_OneSelect "戻る"
  else
    NodeDownload $select_node_version
  fi
}
