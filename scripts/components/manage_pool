#!/bin/bash
# shellcheck disable=SC1091,SC2086,SC1001,SC2317
# shellcheck source="$HOME/.bashrc"

blockGenerateCheck(){
    clear
    log_file="$HOME/dirname-$(date +'%Y-%m-%d_%H-%M-%S').log"
    Header "BPブロック生成可能状態チェック"

    CONFIG="$NODE_HOME/$NODE_CONFIG-config.json"
    mempool_CHK=$(cat $CONFIG | jq ".TraceMempool")
    p2p_CHK=$(cat $CONFIG | jq ".EnableP2P")
    
    get_pooldata

    #メトリクスKES
    metrics_KES=$(curl -s localhost:${NODE_PROMETHEUS_PORT}/metrics | grep remainingKES | awk '{ print $2 }')
    Expiry_KES=$(curl -s localhost:${NODE_PROMETHEUS_PORT}/metrics | grep ExpiryKES | awk '{ print $2 }')
    Start_KES=$(curl -s localhost:${NODE_PROMETHEUS_PORT}/metrics | grep StartKES | awk '{ print $2 }')
    current_KES=$(curl -s localhost:${NODE_PROMETHEUS_PORT}/metrics | grep currentKES | awk '{ print $2 }')
    current_epoch=$(curl -s localhost:${NODE_PROMETHEUS_PORT}/metrics | grep epoch_int | awk '{ print $2 }')
    
    if [ -z "$metrics_KES" ]; then
      echo "KESメトリクスを取得できませんでした"
      echo "このノードがBPであることを確認してください"
      Gum_OneSelect "戻る"
    fi

    active_ST_check(){
      if [ $1 != 0 ]; then
        printf "${CYAN}$(scale1 $1)${NC} ADA"
      else
        printf "$1 ADA \n (ライブステークが有効になるまでスケジュール割り当てはありません)\n"
      fi
    }
    live_Stake=$(cat $NODE_HOME/pooldata.txt | jq -r ".[].live_stake")
    live_Stake=$(scale1 $live_Stake)
    active_Stake=$(cat $NODE_HOME/pooldata.txt | jq -r ".[].active_stake")

    active_Stake=$(active_ST_check $active_Stake)
    pledge=$(cat $NODE_HOME/pooldata.txt | jq -r ".[].pledge")
    pledge_scale=$(scale1 $pledge)

    active_epoch=$(cat $NODE_HOME/pooldata.txt | jq -r ".[].active_epoch_no")
    future_pledge=$(cardano-cli conway query pool-params --stake-pool-id $(cat $NODE_HOME/$POOL_ID_BECH32_FILENAME) | jq .[].futurePoolParams.pledge)
    current_pledge=$(cardano-cli conway query pool-params --stake-pool-id $(cat $NODE_HOME/$POOL_ID_BECH32_FILENAME) | jq .[].poolParams.pledge)

  
    printf "=${PURPLE}[プール情報]${NC}-------------------------------------------------------------------------------\n"
    printf "${CYAN}[$(cat $NODE_HOME/pooldata.txt | jq -r ".[].meta_json.ticker")] $(cat $NODE_HOME/pooldata.txt | jq -r ".[].meta_json.name")${NC} (${CYAN}$(cat $NODE_HOME/pooldata.txt | jq -r ".[].pool_id_bech32")${NC})\n"
    printf "%-16s : ${CYAN}%s${NC} ADA | %-16s : ${CYAN}%s${NC} \n" "ライブステーク" "$live_Stake" "有効ステーク" "$active_Stake" 
    
    echo
    okCnt=1

    #MetaHashチェック
    
    metaChainHash=$(cat $NODE_HOME/pooldata.txt | jq -r ".[].meta_hash")
    metaFileUrl=$(cat $NODE_HOME/pooldata.txt | jq -r ".[].meta_url")
    mkdir -p $NODE_HOME/metaCheck
    wget -q $metaFileUrl -O $NODE_HOME/metaCheck/poolMetaData.json
    cat $NODE_HOME/metaCheck/poolMetaData.json | jq . > $NODE_HOME/metaCheck/metaCheck.json 2>&1
    metaCheck=$(cat $NODE_HOME/metaCheck/metaCheck.json | grep name)
    if [ -z "$metaCheck" ]; then
      printf "=${PURPLE}[メタデータチェック]${NC} ${RED}NG${NC} -------------------------------------------------------------------\n"
      printf "メタデータ構文エラーです\n"
      echo "サーバー(またはGithub)にアップロードされているpoolMetaData.jsonの構文エラーを修正し"
      echo "プール運用マニュアルの「プール情報更新」で再登録してください"
      echo
    else
      metaFileHash=$(cardano-cli conway stake-pool metadata-hash --pool-metadata-file $NODE_HOME/metaCheck/poolMetaData.json)
      if [ $metaChainHash == $metaFileHash ]; then
        printf "=${PURPLE}[メタデータチェック]${NC} ${GREEN}OK${NC} -------------------------------------------------------------------\n"
        printf "%-34s : ${YELLOW}%-64s${NC} \n" "オンチェーンハッシュ" "$metaChainHash"
        printf "%-30s : ${YELLOW}%-64s${NC} \n" "ローカルファイルハッシュ" "$metaFileHash"
        okCnt=$((${okCnt}+1))
      else
        printf "=${PURPLE}[メタデータチェック]${NC} ${RED}NG${NC} -------------------------------------------------------------------\n"
        printf "チェーン登録ハッシュとファイルハッシュが異なります。\n"
        printf "%-34s : ${YELLOW}%s${NC} \n" "オンチェーンハッシュ" "$metaChainHash"
        printf "%-30s : ${YELLOW}%s${NC} \n" "ローカルファイルハッシュ" "$metaFileHash"
        echo プール運用マニュアルの「プール情報更新」で再登録してください。
      fi
    fi
    
    rm -rf $NODE_HOME/metaCheck
    
    koios_stake_total=$(curl -s -X POST "$KOIOS_API/account_info" -H "Accept: application/json" -H "content-type: application/json" -d "{\"_stake_addresses\":[\"$(cat $NODE_HOME/$STAKE_ADDR_FILENAME)\"]}" | jq -r '.[].total_balance')

    if [ $active_epoch -gt $current_epoch ] && [ $future_pledge -ne $current_pledge ]; then
      pledge=$current_pledge
      pledge_scale=$(scale1 $pledge)
      future_pledge_scale=$(scale1 $future_pledge)
      print_pledge="${YELLOW}$pledge_scale${NC} ADA → ${RED}$future_pledge_scale${NC} ADA ($active_epoch エポックで有効)\n"
    else
      print_pledge="${YELLOW}$pledge_scale${NC} ADA\n"
    fi

    #誓約チェック
    if [[ $koios_stake_total -ge $pledge ]]; then
      echo
      printf "=${PURPLE}[誓約チェック]${NC} ${GREEN}OK${NC} -------------------------------------------------------------------------\n"
      okCnt=$((${okCnt}+1))
    else
      echo
      printf "=${PURPLE}[誓約チェック]${NC} ${RED}NG${NC} -------------------------------------------------------------------------\n"
      printf "${YELLOW}payment.addrに宣言済み誓約(Pledge)以上のADAを入金してください${NC}\n"
    fi
      printf "宣言済み誓約　:$print_pledge"
      printf "委任合計　　　:$(scale1 ${koios_stake_total}) ADA (payment.addr + stake.addr報酬合計)\n"

   #ノード起動スクリプトファイル名読み取り
    exec_path=$(grep -H "ExecStart" /etc/systemd/system/cardano-node.service)
    exec_path=${exec_path##*/}
    script_name=${exec_path/%?/}
    script_path="$NODE_HOME/$script_name"

    #起動スクリプトからBP起動ファイル読み取り
    kes_path=$(grep -H "KES=" $script_path)
    vrf_path=$(grep -H "VRF=" $script_path)
    cert_path=$(grep -H "CERT=" $script_path)
    node_port=$(grep -H "PORT=" $script_path)
    node_port=${node_port##*=}
    node_pid=$(pgrep -fn "$(basename cardano-node).*.--port ${node_port}")

    echo
    printf "=${PURPLE}[BPファイル存在確認]${NC} ----------------------------------------------------------------------\n"
    if [ $kes_path ]; then
      kes_name=${kes_path##*/}
      if [ -e "$NODE_HOME/$kes_name" ]; then
        printf "$kes_name: ${GREEN}OK${NC} | "
        okCnt=$((${okCnt}+1))
      else
        printf "$kes_name: ${RED}NG${NC} | "
      fi

    else
      kes_name=""
      kes_CHK="$NODE_HOME/relay"
      printf "${RED}KESファイルが見つかりません${NC} | "
    fi

    if [ $vrf_path ]; then
      vrf_name=${vrf_path##*/}
      if [ -e "$NODE_HOME/$vrf_name" ]; then
        printf "$vrf_name: ${GREEN}OK${NC} | "
        okCnt=$((${okCnt}+1))
      else
        printf "$vrf_name: ${RED}NG${NC} | "
      fi

    else
        vrf_name=""
        vrf_CHK="$NODE_HOME/relay"
        echo printf "${RED}VRFファイルが見つかりません${NC} | "
    fi

    if [ $cert_path ]; then
    cert_name=${cert_path##*/}
      if [ -e "$NODE_HOME/$cert_name" ]; then
        printf "$cert_name: ${GREEN}OK${NC}\n"
        okCnt=$((${okCnt}+1))
      else
        printf "$cert_name: ${RED}NG${NC}\n"
      fi

    else
      cert_name=""
      cert_CHK="$NODE_HOME/relay"
      echo printf "${RED}CERTファイルが見つかりません${NC} | "
    fi

    #ノード同期状況確認
    #APIから最新ブロックNo取得
    koios_blockNo=$(curl -s -X GET "$KOIOS_API/tip" -H "Accept: application/json" | jq -r '.[].block_no')
    

    #ノードから同期済みブロック取得
    currentblock=$(cardano-cli conway query tip $NODE_NETWORK | jq -r '.block')
    

    block_diff=$koios_blockNo-$currentblock
    if [[ $block_diff -ge 2 ]]; then
      clear
      echo
      echo "ノードが最新ブロックに同期してから再度ご確認ください"
      Gum_OneSelect "戻る"
    else
      echo
      printf "=${PURPLE}[ノード同期状況]${NC} ${GREEN}OK${NC} ----------------------------------------------------------------------\n"
      printf "%-32s : ${YELLOW}%-8s${NC} | %-32s : ${YELLOW}%-8s${NC} \n" "オンチェーン最新ブロック" "$koios_blockNo" "ローカルノード最新ブロック" "$currentblock"
      okCnt=$((${okCnt}+1))
    fi

    #メトリクスTx数
    metrics_tx=$(curl -s localhost:${NODE_PROMETHEUS_PORT}/metrics | grep txsProcessedNum_int | awk '{ print $2 }')
    if [ -z $metrics_tx ]; then
      metrics_tx="0"
    fi
    
    # Tx流入判定
    if [ $mempool_CHK = "true" ] && [ $metrics_tx -gt 0 ]; then
      tx_count="OK"
      okCnt=$((${okCnt}+1))
    elif [ $mempool_CHK = "false" ] && [ $metrics_tx -eq 0 ]; then
      tx_count="条件付きOK"
      okCnt=$((${okCnt}+1))
    else
      printf "NG"
    fi

    printf "%s ${GREEN}%-15s${NC} : ${YELLOW}%-8s${NC} | %-26s : ${YELLOW}%-8s${NC}\n" "Tx流入数" "$tx_count" "$metrics_tx" "TraceMempool" "$mempool_CHK"

    if [[ $tx_count = *NG* ]]; then
      printf "\nTxが入ってきていません。1分後に再実行してください\n"
      printf "\n再実行してもNGの場合は、以下の点を再確認してください\n"
      printf "・BPのファイアウォールの設定\n"
      printf "・リレーノードのトポロジーアップデーター設定(フェッチリストログファイルなど)\n"
      printf "・リレーノードの$TOPOLOGYに当サーバーのIPが含まれているか\n\n"
    fi

    echo
    
    peers_in=$(ss -tnp state established 2>/dev/null | grep "${node_pid}," | grep -v "127.0.0.1" | awk -v port=":${node_port}" '$3 ~ port {print}' | wc -l)
    if [ $p2p_CHK = "true" ]; then
      #ダイナミックP2P
      peers_out=$(curl -s localhost:${NODE_PROMETHEUS_PORT}/metrics | grep outgoingConns | awk '{ print $2 }')
      p2p_type="ダイナミックP2P(台帳P2P)"

    else
    #手動P2P
      peers_out=$(ss -tnp state established 2>/dev/null | grep "${node_pid}," | awk -v port=":(${node_port}|${EKG_PORT}|${NODE_PROMETHEUS_PORT})" '$3 !~ port {print}' | wc -l)
      p2p_type="マニュアルP2P(トポロジーアップデータ)"
    fi
  
    if [[ $peers_in -eq 0 ]]; then
      peer_in_judge="NG リレーから接続されていません"
    else
      peer_in_judge="OK"
      okCnt=$((${okCnt}+1))
    fi
    if [[ $peers_out -eq 0 ]]; then
      peer_out_judge=" NG リレーに接続出来ていません"
    else
      peer_out_judge="OK"
      okCnt=$((${okCnt}+1))
    fi
    printf "=${PURPLE}[Peer接続状況]${NC} ----------------------------------------------------------------------------\n"
    printf "%s ${GREEN}%-15s${NC} : ${YELLOW}%-8s${NC} | %s ${GREEN}%-17s${NC} : ${YELLOW}%-8s${NC}\n" "incoming" "$peer_in_judge" "$peers_in" "outgoing" "$peer_out_judge" "$peers_out"

    chain_Vrf_hash=$(cat $NODE_HOME/pooldata.txt | jq -r ".[].vrf_key_hash")

    #ローカルVRFファイル検証
    mkdir -p $NODE_HOME/vrf_check
    cp $NODE_HOME/$VRF_SKEY_FILENAME $NODE_HOME/vrf_check/
    cardano-cli conway key verification-key --signing-key-file $NODE_HOME/vrf_check/$VRF_SKEY_FILENAME --verification-key-file $NODE_HOME/vrf_check/$VRF_VKEY_FILENAME
    cardano-cli conway node key-hash-VRF --verification-key-file $NODE_HOME/vrf_check/$VRF_VKEY_FILENAME --out-file $NODE_HOME/vrf_check/vkeyhash.txt
    local_vrf_hash=$(cat $NODE_HOME/vrf_check/vkeyhash.txt)
    
    if [ $chain_Vrf_hash == $local_vrf_hash ]; then
      hash_check="${GREEN}OK${NC}"
      okCnt=$((${okCnt}+1))
    else
      hash_check="${RED}NG${NC}"
    fi

    echo
    printf "=${PURPLE}[VRFハッシュ値チェック]${NC} $hash_check ----------------------------------------------------------------\n"
    printf "%-34s : ${YELLOW}%s${NC} \n" "オンチェーンハッシュ" "$chain_Vrf_hash"
    printf "%-30s : ${YELLOW}%s${NC} \n" "ローカルファイルハッシュ" "$local_vrf_hash"

    rm -rf $NODE_HOME/vrf_check

    chain_cert_counter=$(cat $NODE_HOME/pooldata.txt | jq -r ".[].op_cert_counter")
    local_cert_counter=$(cardano-cli conway text-view decode-cbor --in-file $NODE_HOME/$NODE_CERT_FILENAME | grep int | head -1 | cut -d"(" -f2 | cut -d")" -f1)
    kes_remaining=$(curl -s http://localhost:${NODE_PROMETHEUS_PORT}/metrics | grep KESPeriods_int | awk '{ print $2 }')
    kes_days=$(bc <<< "$kes_remaining * 1.5")
    kes_cborHex=$(cat $NODE_HOME/$KES_VKEY_FILENAME | jq '.cborHex' | tr -d '"')
    cert_cborHex=$(cardano-cli conway text-view decode-cbor --in-file $NODE_HOME/$NODE_CERT_FILENAME | awk 'NR==4,NR==6 {print}' | sed 's/ //g' | sed 's/#.*//' | tr -d '\n')

    #証明書判定
    if [ $kes_cborHex == $cert_cborHex ]; then
      if [ $chain_cert_counter != "null" ] && [ $local_cert_counter -ge $(($chain_cert_counter+2)) ] && [ $kes_remaining -ge 1 ]; then
        cc="${RED}NG カウンター番号がチェーンより2以上大きいです${NC}"
      elif [ $chain_cert_counter != "null" ] && [ $local_cert_counter -ge $chain_cert_counter ] && [ $kes_remaining -ge 1 ] ; then
        cc="${GREEN}OK${NC}"
        okCnt=$((${okCnt}+1))
      elif [ $chain_cert_counter != "null" ] && [ $local_cert_counter -lt $chain_cert_counter ] && [ $kes_remaining -ge 1 ]; then
        cc="${RED}NG カウンター番号がチェーンより小さいです${NC}"
      elif [ $chain_cert_counter == "null" ] && [ $kes_remaining -ge 1 ]; then
        cc="${GREEN}OK (ブロック未生成)${NC}"
        okCnt=$((${okCnt}+1))
      else
        cc="${RED}NG KESの有効期限が切れています${NC}"
      fi
    else
      cc="${RED}NG CERTファイルに署名された$KES_VKEY_FILENAMEファイルが異なります。${NC}"
    fi

    kes_int=$(($current_KES-$Start_KES+$metrics_KES))

    #KES整合性判定
    if [ $kes_int == 62 ]; then
      kic="OK"
      okCnt=$((${okCnt}+1))
    else
      "${RED}NG KES整合性は62である必要があります。KESファイルを作り直してください${NC}\n"
    fi

    echo
    printf "=${PURPLE}[プール運用証明書チェック]${NC} ($NODE_CERT_FILENAME) $cc --------------------------------\n"
    printf "%-12s : ${YELLOW}%s/${YELLOW}%s${NC} %s | %-12s : ${YELLOW}%s${NC}日 | %s : %s ${GREEN}%s${NC}" "カウンター" "$chain_cert_counter" "$local_cert_counter" "(オンチェーン/CERTファイル)" "KES残日数" "$kes_days" "KES整合性" "$kes_int" "$kic"
    echo
    printf "%-31s : ${YELLOW}%s${NC} \n" "証明書KESハッシュ" "$cert_cborHex"
    printf "%-32s : ${YELLOW}%s${NC} \n" "KESファイルKESハッシュ" "$kes_cborHex"
    echo
    if [ $mempool_CHK == "false" ]; then
      echo -e "----${YELLOW}確認${NC}--------------------------------------------------------------"
      printf "$CONFIGのTraceMempoolが${YELLOW}false${NC}になっています\n"
      printf "正確にチェックする場合は${GREEN}true${NC}へ変更し、ノード再起動後再度チェックしてください\n"
      echo "--------------------------------------------------------------------"
      echo
    fi

    if [ $okCnt -eq 13 ]; then
      echo -e "----${GREEN}OK${NC}--------------------------------------------------------"
      printf " > 全ての項目が ${GREEN}OK${NC} になりブロック生成の準備が整いました！\n"
      echo "--------------------------------------------------------------"
    else
      echo -e "----${RED}NG${NC}--------------------------------------------------------"
      printf " > 1つ以上 ${RED}NG${NC} がありました。プール構成を見直してください\n"
      echo "--------------------------------------------------------------"
    fi
    Gum_OneSelect "戻る"
}

managePool(){
    while :
    do
        clear
        Header "プール情報管理メニュー"
        # selection=$(gum choose --header="" --height=12 --no-show-help "1.ノードインストール ${installCheck}" "2.プールメタデータ作成 ${metaDataCheck}" "3.トポロジー設定" "4.プールキー作成${bpKeyCreateCheck}" "5.運用ウォレット準備${walletCheck}" "6.ステークアドレス登録" "7.プール登録" "8.監視ツールインストール" "メインメニュー")
        manage_pool_select=$(gum filter --height=12 --no-show-help --header.foreground="075" --indicator=">" --placeholder="番号選択も可..." --prompt="◉ " "[1] KES更新" "[2] ブロック生成状態チェック" "[3] トポロジー変更" "[4] プールメタデータ変更" "[5] プール登録証明書変更" "[q] 終了")
        case $manage_pool_select in
        
        "[1] KES更新" )
        createKes
        ;;

        "[2] ブロック生成状態チェック" )
        blockGenerateCheck
        ;;

        "[3] トポロジー変更" )
        topologyManagement
        ;;

        "[4] プールメタデータ変更" )
        createMetadata
        ;;

        "[5] プール登録証明書変更" )
        registarPool
        ;;

        "[q] 終了" )
        tmux kill-session -t sjgtool
        ;;
        
        esac
    done
}