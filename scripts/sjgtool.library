#!/bin/bash

# フォアグラウンドカラー
BLACK='\033[0;30m'
RED='\e[31m'
GREEN='\e[32m'
YELLOW='\e[33m'
BLUE='\e[34m'
PURPLE='\e[35m'
CYAN='\e[36m'
WHITE='\e[37m'

# 太字のフォアグラウンドカラー
B_BLACK='\e[30;1m'
B_RED='\e[31;1m'
B_GREEN='\e[32;1m'
B_YELLOW='\e[33;1m'
B_BLUE='\e[34;1m'
B_PURPLE='\e[35;1m'
B_CYAN='\e[36;1m'
B_WHITE='\e[37;1m'

# 下線
U_BLACK='\e[30;4m'
U_RED='\e[31;4m'
U_GREEN='\e[32;4m'
U_YELLOW='\e[33;4m'
U_BLUE='\e[34;4m'
U_PURPLE='\e[35;4m'
U_CYAN='\e[36;4m'
U_WHITE='\e[37;4m'

# 点滅
F_BLACK='\e[30;5m'
F_RED='\e[31;5m'
F_GREEN='\e[32;5m'
F_YELLOW='\e[33;5m'
F_BLUE='\e[34;5m'
F_PURPLE='\e[35;5m'
F_CYAN='\e[36;5m'
F_WHITE='\e[37;5m'

# 色リセット
NC='\033[0m' # No Color


## Gum関連関数

style(){
  echo -e '{{ Color "15" " '"$1"' " }}''{{ Color "11" " '"$2"' " }}' "\n" \
    | gum format -t template
}

YellowStyle(){
  echo -e '{{ Color "11" " '"$1"' " }}' "\n" \
    | gum format -t template
}

MagentaStyle(){
  echo -e '{{ Color "127" " '"$1"' " }}' "\n" \
    | gum format -t template
}

GreenStyle(){
  echo -e '{{ Color "2" " '"$1"' " }}' "\n" \
    | gum format -t template
}

#spin
Gum_DotSpinner3(){
    gum spin --spinner dot --title ${1} -- sleep 3
}

Gum_DotSpinner(){
    gum spin --spinner dot --title ${1} -- ${2}
}

Gum_Fnspin() {
    local TITLE="${*: -1}"
    local COMMANDO="${*:1:$(($# - 1))}"
    gum spin --spinner="dot" --title="$TITLE" --show-output -- bash -c "source ./sjgtool.sh && $COMMANDO"
}

Gum_OneSelect(){
  gum choose --header="" --height=1 --no-show-help "${1}"
}

Gum_Confirm_YesNo(){
  gum confirm "${1}" --default=false --affirmative="はい" --negative="いいえ" --no-show-help && iniSettings="${2}" || iniSettings="${3}"
}


#----------支払い系関数----------------

#loverace変換
scale1(){
  #r_amount=`echo "scale=1; $1 / 1000000" | bc`
  echo "scale=6; $1 / 1000000" | bc
}

scale3(){
  #r_amount=`echo "scale=3; $1 / 1000000" | bc | awk '{echo "%.5f\n", $0}'`
  echo "scale=6; $1 / 1000000" | bc | awk '{echo "%.5f\n", $0}'
}

WalletBalance(){
  tx_in=""
  total_balance=0
  while read -r utxo; do
      in_addr=$(awk '{ print $1 }' <<< "${utxo}")
      idx=$(awk '{ print $2 }' <<< "${utxo}")
      utxo_balance=$(awk '{ print $3 }' <<< "${utxo}")
      total_balance=$((${total_balance}+${utxo_balance}))
      tx_in="${tx_in} --tx-in ${in_addr}#${idx}"
  done < ${NODE_HOME}/balance.out
  txcnt=$(cat balance.out | wc -l)
  style "ADA残高:" "$(scale1 ${total_balance})"
  style "未使用UTXO:" ${txcnt}
}

Cli_FeeCal(){
  fee=$(cardano-cli transaction calculate-min-fee \
    --tx-body-file ${NODE_HOME}/tx.tmp \
    --tx-in-count ${txcnt} \
    --tx-out-count 1 \
    $NODE_NETWORK \
    --witness-count 2 \
    --byron-witness-count 0 \
    --protocol-params-file ${NODE_HOME}/params.json | awk '{ print $1 }')
echo fee: $fee
echo
}

#ウォレットUtxO確認
CheckWallet(){
  echo 
  style "アドレス：" "$(cat ${NODE_HOME}/${PAYMENT_ADDR_FILENAME})"
  echo 
  gum spin --spinner dot --show-output --title "ウォレット残高を確認しています" -- cardano-cli query utxo --address "$(cat ${NODE_HOME}/${PAYMENT_ADDR_FILENAME})" $NODE_NETWORK > ${NODE_HOME}/fullUtxo.out
  #echo $0 >> fullUtxo.out
  tail -n +3 ${NODE_HOME}/fullUtxo.out | sort -k3 -nr > ${NODE_HOME}/balance.out
  cat ${NODE_HOME}/balance.out
  echo
  WalletBalance
}

#トランザクション送信
Cli_TxSubmit(){
  echo
  Gum_Confirm_YesNo "トランザクションを送信しますか？" "Yes" "再度トランザクション作成から実施してください"
  if [ ${iniSettings} == "Yes" ]; then
    local txId=$(cardano-cli transaction txid --tx-body-file ${NODE_HOME}/tx.raw)
    local txResult=$(cardano-cli transaction submit --tx-file ${NODE_HOME}/tx.signed $NODE_NETWORK)
    echo
    if [[ ${txResult} == "Transaction"* ]]; then
      echo '----------------------------------------'
      echo 'Tx送信結果'
      echo '----------------------------------------'
      echo ${txResult}
      echo
      echo 'トランザクションURL'
      if [ ${NODE_CONFIG} == 'mainnet' ]; then
        echo "https://cardanoscan.io/transaction/${txId}"
      elif [ ${NODE_CONFIG} == 'preprod' ]; then
        echo "https://preprod.cardanoscan.io/transaction/${txId}"
      elif [ ${NODE_CONFIG} == 'preview' ]; then
        echo "https://preview.cardanoscan.io/transaction/${txId}"
      else
        echo "TxID:${txId}"
      fi
      
      printf "\n${FG_GREEN}Tx送信に成功しました${NC}\n"
      echo
      #トランザクション確認
      printf "\n${FG_YELLOW}Tx承認を確認しています。このまましばらくお待ち下さい...${NC}\n\n"
      while :
        do
        koios_tx_status=$(curl -s -X POST "$KOIOS_API/tx_status" -H "Accept: application/json" -H "content-type: application/json" -d "{\"_tx_hashes\":[\"${txId}\"]}" | jq -r '.[].num_confirmations')
        if [ $koios_tx_status != "null" ] && [ $koios_tx_status -gt 1 ]; then
          printf "確認済みブロック:$koios_tx_status ${FG_GREEN}Txが承認されました${NC}\n\n"
          sleep 3s
          break
        else
          sleep 30s
        fi
      done
      echo
      Gum_OneSelect "戻る"
    else
      echo '----------------------------------------'
      echo 'Tx送信結果'
      echo '----------------------------------------'
      echo ${txResult}
      echo
      printf "${FG_RED}Tx送信に失敗しました${NC}\n"
    fi
  else 
    echo
    echo "送信をキャンセルしました"
    echo
    Gum_OneSelect "戻る"
    echo
  fi
}




#----------モジュール関数----------------

FilePathAndHash(){
  echo "${1} >> ${YELLOW}$(sha256sum ${1} | awk '{ print $1 }')${NC}"
}


#----------CLI関数----------------

Cli_CurrentSlot(){
  currentSlot=$(cardano-cli query tip $NODE_NETWORK | jq -r '.slot')
}


